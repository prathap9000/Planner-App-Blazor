@page "/auth/login"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService

<div class="row">
    <div class="col-12">
        <h2>Login </h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" class="btn-block mr-2"
                              Text="Login" ButtonStyle="Radzen.ButtonStyle.Secondary" Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" class="btn-block mr-2"
                              Text="Register" ButtonStyle="Radzen.ButtonStyle.Primary"
                              Disabled="isBusy" Click="GotoRegister" />


            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;

        var result = await authService.LoginAsync(model);
        if (result.IsSuccess)
        {
            message = "Welcome to Planner App";
            messageType = Models.AlertMessageType.Success;

            var userInfo = new Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };
            await storageService.SetItemAsync("user", userInfo);
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GotoRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
